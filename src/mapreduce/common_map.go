package mapreduce

import (
	"hash/fnv"
	"os"
	"log"
	"encoding/json"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	// 对于每一个输入的文件inFile, 调用自定义的map函数mapF，获得内容，并且分割mapF的输出
	// ，形成nReduce个中间文件

	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	//
	//主要操作是打开文件名为inFile的输入文件，读取文件内容，
	// 然后调用mapF函数来处理内容，返回值为KeyVaule结构体[common.go]实例，
	// 然后生成nReduce个中间文件，提示使用json格式写入

	//note. Map的大致流程如下(官方教材建议不上传代码，所以去除)
	//S1:打开输入文件，并且读取全部数据
	//S2:调用用户自定义的mapF函数,分检数据,在word count的案例中分割成单词
	//S3:将mapF返回的数据根据key分类,跟文件名对应(reduceName获取文件名)
	//S4:将分类好的数据分别写入不同文件

	//打开文件
	inputFile, err:= os.Open(inFile)
	if err != nil {
		log.Fatal("doMap: open input file ", inFile, " error: ", err)
	}
	defer inputFile.Close()

	//获取文件属性内容
	fileInfo, err:= inputFile.Stat()
	if err != nil {
		log.Fatal("doMap: getstat input file ", inFile, " error: ", err)
	}

	//读取文件内容
	data := make([]byte, fileInfo.Size())
	_,err = inputFile.Read(data)
	if err != nil{
		log.Fatal("doMap: read input file ", inFile, " error: ", err)
	}

	//mapF处理的文件内容写入到map中
	keyValues := mapF(inFile,string(data))

	for i := 0; i < nReduce; i++ {
		fileName := reduceName(jobName,mapTask,i)
		reduceFile, err:=os.Create(fileName)
		if err != nil {
			log.Fatal("doMap: create intermediate file ", fileName, " error: ", err)
		}
		defer reduceFile.Close()

		//转成json
		enc := json.NewEncoder(reduceFile)
		for _,kv:=range keyValues {
			//当key重复时
			if ihash(kv.Key)%nReduce == i {
				err := enc.Encode(&kv)
				if err != nil {
					log.Fatal("doMap: encode error: ", err)
				}
			}
		}
	}




}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
